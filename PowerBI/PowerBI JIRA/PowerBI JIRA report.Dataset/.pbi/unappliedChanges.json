{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "YourOrg issues",
      "lineageTag": "4adae639-dbf3-4b0d-8016-e6bce3b421c3",
      "queryGroupId": "6ae60c9a-d92b-4200-817e-c1596b1ebd60",
      "text": [
        "let",
        "    Source = FetchPages(\"\", 100),",
        "    #\"Expanded records\" = Table.ExpandRecordColumn(Source, \"Column1\", {\"expand\", \"id\", \"self\", \"key\", \"fields\"}, {\"expand\", \"issue ID\", \"issue address\", \"issue key\", \"fields\"}),",
        "    #\"Expanded fields\" = Table.ExpandRecordColumn(#\"Expanded records\", \"fields\", {\"parent\", \"fixVersions\", \"resolution\", \"lastViewed\", \"priority\", \"labels\", \"timeestimate\", \"aggregatetimeoriginalestimate\", \"versions\", \"issuelinks\", \"assignee\", \"status\", \"components\", \"aggregatetimeestimate\", \"creator\", \"subtasks\", \"reporter\", \"aggregateprogress\", \"progress\", \"votes\", \"issuetype\", \"timespent\", \"project\", \"aggregatetimespent\", \"resolutiondate\", \"workratio\", \"watches\", \"created\", \"updated\", \"timeoriginalestimate\", \"description\", \"summary\", \"environment\", \"duedate\"}, {\"parent\", \"fixVersions\", \"resolution\", \"lastViewed\", \"priority\", \"labels\", \"timeestimate\", \"aggregatetimeoriginalestimate\", \"versions\", \"issuelinks\", \"assignee\", \"status\", \"components\", \"aggregatetimeestimate\", \"creator\", \"subtasks\", \"reporter\", \"aggregateprogress\", \"progress\", \"votes\", \"issuetype\", \"timespent\", \"project\", \"aggregatetimespent\", \"resolutiondate\", \"workratio\", \"watches\", \"created\", \"updated\", \"timeoriginalestimate\", \"description\", \"summary\", \"environment\", \"duedate\"}),",
        "    // Resolution: Worse version of status",
        "    // Description: wayyyy to much text, dont need that in report's memory",
        "    // Expand: fields the API can get",
        "    // Watches: don't need to know/report it",
        "    // Versions: would bloat report",
        "    // Linked Issues: would bloat report",
        "    // Subtask: already have parent task if relevant, would bloat",
        "    // Votes: not using votes here",
        "    #\"Removed unneccesary fields\" = Table.RemoveColumns(#\"Expanded fields\",{\"expand\", \"watches\", \"versions\", \"issuelinks\", \"subtasks\", \"votes\", \"resolution\", \"description\", \"labels\", \"components\"}),",
        "    #\"Expanded fixVersions to List\" = Table.ExpandListColumn(#\"Removed unneccesary fields\", \"fixVersions\"),",
        "    #\"Expanded fixVersions to Name\" = Table.ExpandRecordColumn(#\"Expanded fixVersions to List\", \"fixVersions\", {\"id\"}, {\"fixVersions.id\"}),",
        "    #\"Filtered issue not null or blank\" = Table.SelectRows(#\"Expanded fixVersions to Name\", each [issue ID] <> null and [issue ID] <> \"\"),",
        "    #\"Expanded issuetype\" = Table.ExpandRecordColumn(#\"Filtered issue not null or blank\", \"issuetype\", {\"id\", \"subtask\"}, {\"issuetype.id\", \"issuetype.isSubTask\"}),",
        "    #\"Expanded project\" = Table.ExpandRecordColumn(#\"Expanded issuetype\", \"project\", {\"id\"}, {\"project.id\"}),",
        "    #\"Expanded priority\" = Table.ExpandRecordColumn(#\"Expanded project\", \"priority\", {\"id\"}, {\"priority.id\"}),",
        "    #\"Expanded assignee\" = Table.ExpandRecordColumn(#\"Expanded priority\", \"assignee\", {\"accountId\"}, {\"assignee.accountId\"}),",
        "    #\"Expanded status\" = Table.ExpandRecordColumn(#\"Expanded assignee\", \"status\", {\"id\"}, {\"status.id\"}),",
        "    #\"Expanded reporter\" = Table.ExpandRecordColumn(#\"Expanded status\", \"reporter\", {\"name\", \"emailAddress\", \"displayName\", \"active\"}, {\"reporter.name\", \"reporter.emailAddress\", \"reporter.displayName\", \"reporter.active\"}),",
        "    #\"Expanded aggregateprogress\" = Table.ExpandRecordColumn(#\"Expanded reporter\", \"aggregateprogress\", {\"progress\", \"total\"}, {\"aggregateprogress.progress\", \"aggregateprogress.total\"}),",
        "    #\"Expanded progress\" = Table.ExpandRecordColumn(#\"Expanded aggregateprogress\", \"progress\", {\"progress\", \"total\"}, {\"progress.progress\", \"progress.total\"}),",
        "    #\"Expanded parent\" = Table.ExpandRecordColumn(#\"Expanded progress\", \"parent\", {\"id\", \"key\"}, {\"parent.id\", \"parent.key\"}),",
        "    #\"Expanded creator\" = Table.ExpandRecordColumn(#\"Expanded parent\", \"creator\", {\"accountId\", \"displayName\"}, {\"creator.accountId\", \"creator.displayName\"}),",
        "    #\"Changed Type duedate\" = Table.TransformColumnTypes(#\"Expanded creator\",{{\"duedate\", type date}}),",
        "    // Clean up for matching into lookup table",
        "    #\"Uppercased environment\" = Table.TransformColumns(Table.TransformColumnTypes(#\"Changed Type duedate\", {{\"environment\", type text}}, \"en-AU\"),{}),",
        "    #\"Replaced Environement blank -> null\" = Table.ReplaceValue(#\"Uppercased environment\",\"\",null,Replacer.ReplaceValue,{\"environment\"}),",
        "    #\"Merged w status\" = Table.NestedJoin(#\"Replaced Environement blank -> null\", {\"status.id\"}, #\"Status Codes\", {\"id\"}, \"Status Codes\", JoinKind.LeftOuter),",
        "    #\"Expanded status is terminal\" = Table.ExpandTableColumn(#\"Merged w status\", \"Status Codes\", {\"Is terminal\"}, {\"Status Codes.Is terminal\"}),",
        "    // Needed to add a way to infill resolved data for a few issue types which don't automatically create a resolution date in JIRA. Checks against the status codes table's `is terminal` col",
        "    // Using last modified instead where resolution = NULL",
        "    #\"Added Improved Resolution Date\" = Table.AddColumn(#\"Expanded status is terminal\", \"Resolution Date Improved\", each if (",
        "\t[resolutiondate]  = null ",
        "\tand [Status Codes.Is terminal] = true",
        ") then [updated] ",
        "// if nothing found, just give the null",
        "else [resolutiondate]),",
        "    #\"removed status is terminal\" = Table.RemoveColumns(#\"Added Improved Resolution Date\",{\"Status Codes.Is terminal\"}),",
        "    // LDS was overseas, Andrew @ SKEDA is in Canberra tz, Davide @ SKEDA is in Sydney TZ",
        "    #\"Changed Type time to timezoned\" = Table.TransformColumnTypes(#\"removed status is terminal\",{{\"lastViewed\", type datetimezone}, {\"updated\", type datetimezone}, {\"created\", type datetimezone}, {\"resolutiondate\", type datetimezone}, {\"Resolution Date Improved\", type datetimezone}}),",
        "    #\"Added days since mod\" = Table.AddColumn(#\"Changed Type time to timezoned\", \"Days since Modified\", each Duration.Days(DateTime.Date(DateTime.LocalNow()) - DateTime.Date([updated]))),",
        "    #\"Added days since created\" = Table.AddColumn(#\"Added days since mod\", \"Days since Created\", each Duration.Days(DateTime.Date(DateTime.LocalNow()) - DateTime.Date([created]))),",
        "    #\"Removed resolution date, replaced by improved version\" = Table.RemoveColumns(#\"Added days since created\",{\"resolutiondate\"}),",
        "    #\"Added Days taken to resolve\" = Table.AddColumn(#\"Removed resolution date, replaced by improved version\", \"Days to Resolve\", each Duration.Days(DateTime.Date([Resolution Date Improved]) - DateTime.Date([created]))),",
        "    #\"Changed resolved days to num\" = Table.TransformColumnTypes(#\"Added Days taken to resolve\",{{\"Days to Resolve\", Int64.Type}}),",
        "    #\"Duplicated created to date only\" = Table.DuplicateColumn(#\"Changed resolved days to num\", \"created\", \"created - Date\"),",
        "    #\"Duplicated updated to date only\" = Table.DuplicateColumn(#\"Duplicated created to date only\", \"updated\", \"updated - Date\"),",
        "    #\"Duplicated resolution to date only\" = Table.DuplicateColumn(#\"Duplicated updated to date only\", \"Resolution Date Improved\", \"Resolution Date Improved - Date\"),",
        "    #\"Changed duplicate datetimes to dates\" = Table.TransformColumnTypes(#\"Duplicated resolution to date only\",{{\"created - Date\", type date}, {\"updated - Date\", type date}, {\"Resolution Date Improved - Date\", type date}}),",
        "    // Buffer whole table into meory for dup removal",
        "    #\"Sorted Rows\" = Table.Buffer(Table.Sort(#\"Changed duplicate datetimes to dates\",{{\"issue ID\", Order.Ascending}})),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Sorted Rows\")",
        "in",
        "    #\"Removed Duplicates\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = FetchPages(\\\"\\\", 100),\\n    #\\\"Expanded records\\\" = Table.ExpandRecordColumn(Source, \\\"Column1\\\", {\\\"expand\\\", \\\"id\\\", \\\"self\\\", \\\"key\\\", \\\"fields\\\"}, {\\\"expand\\\", \\\"issue ID\\\", \\\"issue address\\\", \\\"issue key\\\", \\\"fields\\\"}),\\n    #\\\"Expanded fields\\\" = Table.ExpandRecordColumn(#\\\"Expanded records\\\", \\\"fields\\\", {\\\"parent\\\", \\\"fixVersions\\\", \\\"resolution\\\", \\\"lastViewed\\\", \\\"priority\\\", \\\"labels\\\", \\\"timeestimate\\\", \\\"aggregatetimeoriginalestimate\\\", \\\"versions\\\", \\\"issuelinks\\\", \\\"assignee\\\", \\\"status\\\", \\\"components\\\", \\\"aggregatetimeestimate\\\", \\\"creator\\\", \\\"subtasks\\\", \\\"reporter\\\", \\\"aggregateprogress\\\", \\\"progress\\\", \\\"votes\\\", \\\"issuetype\\\", \\\"timespent\\\", \\\"project\\\", \\\"aggregatetimespent\\\", \\\"resolutiondate\\\", \\\"workratio\\\", \\\"watches\\\", \\\"created\\\", \\\"updated\\\", \\\"timeoriginalestimate\\\", \\\"description\\\", \\\"summary\\\", \\\"environment\\\", \\\"duedate\\\"}, {\\\"parent\\\", \\\"fixVersions\\\", \\\"resolution\\\", \\\"lastViewed\\\", \\\"priority\\\", \\\"labels\\\", \\\"timeestimate\\\", \\\"aggregatetimeoriginalestimate\\\", \\\"versions\\\", \\\"issuelinks\\\", \\\"assignee\\\", \\\"status\\\", \\\"components\\\", \\\"aggregatetimeestimate\\\", \\\"creator\\\", \\\"subtasks\\\", \\\"reporter\\\", \\\"aggregateprogress\\\", \\\"progress\\\", \\\"votes\\\", \\\"issuetype\\\", \\\"timespent\\\", \\\"project\\\", \\\"aggregatetimespent\\\", \\\"resolutiondate\\\", \\\"workratio\\\", \\\"watches\\\", \\\"created\\\", \\\"updated\\\", \\\"timeoriginalestimate\\\", \\\"description\\\", \\\"summary\\\", \\\"environment\\\", \\\"duedate\\\"}),\\n    // Resolution: Worse version of status\\n    // Description: wayyyy to much text, dont need that in report's memory\\n    // Expand: fields the API can get\\n    // Watches: don't need to know/report it\\n    // Versions: would bloat report\\n    // Linked Issues: would bloat report\\n    // Subtask: already have parent task if relevant, would bloat\\n    // Votes: not using votes here\\n    #\\\"Removed unneccesary fields\\\" = Table.RemoveColumns(#\\\"Expanded fields\\\",{\\\"expand\\\", \\\"watches\\\", \\\"versions\\\", \\\"issuelinks\\\", \\\"subtasks\\\", \\\"votes\\\", \\\"resolution\\\", \\\"description\\\", \\\"labels\\\", \\\"components\\\"}),\\n    #\\\"Expanded fixVersions to List\\\" = Table.ExpandListColumn(#\\\"Removed unneccesary fields\\\", \\\"fixVersions\\\"),\\n    #\\\"Expanded fixVersions to Name\\\" = Table.ExpandRecordColumn(#\\\"Expanded fixVersions to List\\\", \\\"fixVersions\\\", {\\\"id\\\"}, {\\\"fixVersions.id\\\"}),\\n    #\\\"Filtered issue not null or blank\\\" = Table.SelectRows(#\\\"Expanded fixVersions to Name\\\", each [issue ID] <> null and [issue ID] <> \\\"\\\"),\\n    #\\\"Expanded issuetype\\\" = Table.ExpandRecordColumn(#\\\"Filtered issue not null or blank\\\", \\\"issuetype\\\", {\\\"id\\\", \\\"subtask\\\"}, {\\\"issuetype.id\\\", \\\"issuetype.isSubTask\\\"}),\\n    #\\\"Expanded project\\\" = Table.ExpandRecordColumn(#\\\"Expanded issuetype\\\", \\\"project\\\", {\\\"id\\\"}, {\\\"project.id\\\"}),\\n    #\\\"Expanded priority\\\" = Table.ExpandRecordColumn(#\\\"Expanded project\\\", \\\"priority\\\", {\\\"id\\\"}, {\\\"priority.id\\\"}),\\n    #\\\"Expanded assignee\\\" = Table.ExpandRecordColumn(#\\\"Expanded priority\\\", \\\"assignee\\\", {\\\"accountId\\\"}, {\\\"assignee.accountId\\\"}),\\n    #\\\"Expanded status\\\" = Table.ExpandRecordColumn(#\\\"Expanded assignee\\\", \\\"status\\\", {\\\"id\\\"}, {\\\"status.id\\\"}),\\n    #\\\"Expanded reporter\\\" = Table.ExpandRecordColumn(#\\\"Expanded status\\\", \\\"reporter\\\", {\\\"name\\\", \\\"emailAddress\\\", \\\"displayName\\\", \\\"active\\\"}, {\\\"reporter.name\\\", \\\"reporter.emailAddress\\\", \\\"reporter.displayName\\\", \\\"reporter.active\\\"}),\\n    #\\\"Expanded aggregateprogress\\\" = Table.ExpandRecordColumn(#\\\"Expanded reporter\\\", \\\"aggregateprogress\\\", {\\\"progress\\\", \\\"total\\\"}, {\\\"aggregateprogress.progress\\\", \\\"aggregateprogress.total\\\"}),\\n    #\\\"Expanded progress\\\" = Table.ExpandRecordColumn(#\\\"Expanded aggregateprogress\\\", \\\"progress\\\", {\\\"progress\\\", \\\"total\\\"}, {\\\"progress.progress\\\", \\\"progress.total\\\"}),\\n    #\\\"Expanded parent\\\" = Table.ExpandRecordColumn(#\\\"Expanded progress\\\", \\\"parent\\\", {\\\"id\\\", \\\"key\\\"}, {\\\"parent.id\\\", \\\"parent.key\\\"}),\\n    #\\\"Expanded creator\\\" = Table.ExpandRecordColumn(#\\\"Expanded parent\\\", \\\"creator\\\", {\\\"accountId\\\", \\\"displayName\\\"}, {\\\"creator.accountId\\\", \\\"creator.displayName\\\"}),\\n    #\\\"Changed Type duedate\\\" = Table.TransformColumnTypes(#\\\"Expanded creator\\\",{{\\\"duedate\\\", type date}}),\\n    // Clean up for matching into lookup table\\n    #\\\"Uppercased environment\\\" = Table.TransformColumns(Table.TransformColumnTypes(#\\\"Changed Type duedate\\\", {{\\\"environment\\\", type text}}, \\\"en-AU\\\"),{}),\\n    #\\\"Replaced Environement blank -> null\\\" = Table.ReplaceValue(#\\\"Uppercased environment\\\",\\\"\\\",null,Replacer.ReplaceValue,{\\\"environment\\\"}),\\n    #\\\"Merged w status\\\" = Table.NestedJoin(#\\\"Replaced Environement blank -> null\\\", {\\\"status.id\\\"}, #\\\"Status Codes\\\", {\\\"id\\\"}, \\\"Status Codes\\\", JoinKind.LeftOuter),\\n    #\\\"Expanded status is terminal\\\" = Table.ExpandTableColumn(#\\\"Merged w status\\\", \\\"Status Codes\\\", {\\\"Is terminal\\\"}, {\\\"Status Codes.Is terminal\\\"}),\\n    // Needed to add a way to infill resolved data for a few issue types which don't automatically create a resolution date in JIRA. Checks against the status codes table's `is terminal` col\\n    // Using last modified instead where resolution = NULL\\n    #\\\"Added Improved Resolution Date\\\" = Table.AddColumn(#\\\"Expanded status is terminal\\\", \\\"Resolution Date Improved\\\", each if (\\n\\t[resolutiondate]  = null \\n\\tand [Status Codes.Is terminal] = true\\n) then [updated] \\n// if nothing found, just give the null\\nelse [resolutiondate]),\\n    #\\\"removed status is terminal\\\" = Table.RemoveColumns(#\\\"Added Improved Resolution Date\\\",{\\\"Status Codes.Is terminal\\\"}),\\n    // LDS was overseas, Andrew @ SKEDA is in Canberra tz, Davide @ SKEDA is in Sydney TZ\\n    #\\\"Changed Type time to timezoned\\\" = Table.TransformColumnTypes(#\\\"removed status is terminal\\\",{{\\\"lastViewed\\\", type datetimezone}, {\\\"updated\\\", type datetimezone}, {\\\"created\\\", type datetimezone}, {\\\"resolutiondate\\\", type datetimezone}, {\\\"Resolution Date Improved\\\", type datetimezone}}),\\n    #\\\"Added days since mod\\\" = Table.AddColumn(#\\\"Changed Type time to timezoned\\\", \\\"Days since Modified\\\", each Duration.Days(DateTime.Date(DateTime.LocalNow()) - DateTime.Date([updated]))),\\n    #\\\"Added days since created\\\" = Table.AddColumn(#\\\"Added days since mod\\\", \\\"Days since Created\\\", each Duration.Days(DateTime.Date(DateTime.LocalNow()) - DateTime.Date([created]))),\\n    #\\\"Removed resolution date, replaced by improved version\\\" = Table.RemoveColumns(#\\\"Added days since created\\\",{\\\"resolutiondate\\\"}),\\n    #\\\"Added Days taken to resolve\\\" = Table.AddColumn(#\\\"Removed resolution date, replaced by improved version\\\", \\\"Days to Resolve\\\", each Duration.Days(DateTime.Date([Resolution Date Improved]) - DateTime.Date([created]))),\\n    #\\\"Changed resolved days to num\\\" = Table.TransformColumnTypes(#\\\"Added Days taken to resolve\\\",{{\\\"Days to Resolve\\\", Int64.Type}}),\\n    #\\\"Duplicated created to date only\\\" = Table.DuplicateColumn(#\\\"Changed resolved days to num\\\", \\\"created\\\", \\\"created - Date\\\"),\\n    #\\\"Duplicated updated to date only\\\" = Table.DuplicateColumn(#\\\"Duplicated created to date only\\\", \\\"updated\\\", \\\"updated - Date\\\"),\\n    #\\\"Duplicated resolution to date only\\\" = Table.DuplicateColumn(#\\\"Duplicated updated to date only\\\", \\\"Resolution Date Improved\\\", \\\"Resolution Date Improved - Date\\\"),\\n    #\\\"Changed duplicate datetimes to dates\\\" = Table.TransformColumnTypes(#\\\"Duplicated resolution to date only\\\",{{\\\"created - Date\\\", type date}, {\\\"updated - Date\\\", type date}, {\\\"Resolution Date Improved - Date\\\", type date}}),\\n    // Buffer whole table into meory for dup removal\\n    #\\\"Sorted Rows\\\" = Table.Buffer(Table.Sort(#\\\"Changed duplicate datetimes to dates\\\",{{\\\"issue ID\\\", Order.Ascending}})),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Sorted Rows\\\")\\nin\\n    #\\\"Removed Duplicates\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "FetchPage",
      "lineageTag": "817bf858-ee70-40ab-a8a4-fc185ebf8a0b",
      "queryGroupId": "0578f6e1-15e6-4c14-9cac-bd113d201f09",
      "text": [
        "let",
        "    FetchPage = (url as text, pageSize as number, skipRows as number) as table =>",
        "    let",
        "        //Here is where you run the code that will return a single page",
        "        contents = Web.Contents(",
        "            URL",
        "            , [RelativePath = \"/rest/api/2/search\"",
        "            , Query = [maxResults= Text.From(pageSize), startAt = Text.From(skipRows)]",
        "            ]",
        "        )",
        "        , json = Json.Document(contents)",
        "        , Value = json[issues]",
        "        , table = Table.FromList(Value, Splitter.SplitByNothing(), null, null, ExtraValues.Error)",
        "    in",
        "        table meta [skipRows = skipRows + pageSize, total = 100]",
        "in",
        "    FetchPage"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "FetchPages",
      "lineageTag": "acf45744-d51a-4764-8d50-4564e22f9b0a",
      "queryGroupId": "0578f6e1-15e6-4c14-9cac-bd113d201f09",
      "text": [
        "let",
        "    FetchPages = (url as text, pageSize as number) => ",
        "let ",
        "    Source = GenerateByPage(",
        "    (previous) =>",
        "    let",
        "        skipRows = if previous = null then 0 else Value.Metadata(previous)[skipRows],",
        "        totalItems = if previous = null then 0 else Value.Metadata(previous)[total],",
        "        table = if previous = null or Table.RowCount(previous) = pageSize then ",
        "                    FetchPage(url, pageSize, skipRows) ",
        "\t\telse null",
        "    in table,",
        "    ",
        "    type table [Column1])",
        "in",
        "    Source",
        "in",
        "    FetchPages"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "GenerateByPage",
      "lineageTag": "ef1a849c-4751-4d21-90ae-50b628977075",
      "queryGroupId": "0578f6e1-15e6-4c14-9cac-bd113d201f09",
      "text": [
        "//Query Name: GenerateByPage",
        "let",
        "    Source = (getNextPage as function, optional tableType as type) as table =>",
        "    let",
        "        listOfPages = List.Generate(",
        "            () => getNextPage(null),",
        "            (lastPage) => lastPage <> null,",
        "            (lastPage) => getNextPage(lastPage)",
        "            ),",
        "        tableOfPages = Table.FromList(listOfPages, Splitter.SplitByNothing(), {\"Column1\"}),",
        "        firstRow = tableOfPages{0}?,",
        "        keys = if tableType = null then Table.ColumnNames(firstRow[Column1])",
        "               else Record.FieldNames(Type.RecordFields(Type.TableRow(tableType))),",
        "        appliedType = if tableType = null then Value.Type(firstRow[Column1]) else tableType",
        "    in",
        "        if tableType = null and firstRow = null then",
        "            Table.FromRows({})",
        "        else",
        "        Value.ReplaceType(Table.ExpandTableColumn(tableOfPages, \"Column1\", keys), appliedType)",
        "in",
        "    Source"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "URL",
      "lineageTag": "ed83b390-9817-4fd6-bc11-dfe2487610af",
      "description": "Jira's URL",
      "queryGroupId": "7d887633-a4e5-4268-a76c-694831af095b",
      "text": [
        "\"YOUR_JIRA_DOMAIN\" meta [IsParameterQuery=true, Type=\"Any\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "Status Ranks",
      "lineageTag": "3c8ddbd3-d303-4452-867b-ba344665d548",
      "description": "Sort order and a hierarchy added manually, feeds into a merge",
      "queryGroupId": "7f588cab-7e40-4edf-9e3c-32ab14e7191d",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"lVRNc4IwEP0rGc899NvxCGKtM21lEOvB8ZCBVVNjYpMo479vMJKKJUAPQEh2377dfZv5vOPjZEP5qnNzsbrTz4v3Nhl0FjfzzoihAA5A+W4LTOmj2SjU76dro1DwlQApHRYxRwHXO8X3vnQaUswYYSuHc8AZ6I3zp9fNcaKpOetjlgClkOrNy3Wvd2k1AQqJghQtubjOBxNlQj+Wgn5Apv/N+7ZMR+ClcuYSEblB7xpzhdWJSSXtEFiqo6IIDuQUwssMD+TvJWGmkA/lsJAQSThD3m4n+KEGG0vpPrWBCrxWwT0mMxBuVEsugq9TpWvbYeNFIPleJNCKw9SLUQxSIVKSW7Nj7pQbjP7pN2boldO0RiSWUsuaF/ZnrTtQrfkkHuo27Sg/Nog1GHxWlaZqmCx4GI2DFmRyaKtSu+hWYxY86iF9ypONHkb/iMZqDSK/fsyWXj27S9GM3Ke8pg252mjN4JzvQFlzHVqdz4hapwJnrFboQ5znZ5T+vScC8j42dsYMOKatRKpTZu6UDLWGcQxAYaIPkMcwPUriIhgKoGRLGBbHJtOSIlpJuDQjrTxCAPErzT8sFj8=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [status.name = _t, Family = _t, #\"Status Rank\" = _t, #\"Is terminal\" = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"status.name\", type text}, {\"Family\", type text}, {\"Status Rank\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Status Codes",
      "lineageTag": "4d93aed3-0bb0-4100-aace-a437ba1ed31f",
      "queryGroupId": "6fd0b5dd-a3b0-4581-95fa-6c1f9749a2c7",
      "text": [
        "let",
        "    Source = FetchPages(\"\", 100),",
        "    #\"Expanded records\" = Table.ExpandRecordColumn(Source, \"Column1\", {\"expand\", \"id\", \"self\", \"key\", \"fields\"}, {\"expand\", \"issue ID\", \"issue address\", \"issue key\", \"fields\"}),",
        "    #\"Expanded fields\" = Table.ExpandRecordColumn(#\"Expanded records\", \"fields\", {\"parent\", \"fixVersions\", \"resolution\", \"lastViewed\", \"priority\", \"labels\", \"timeestimate\", \"aggregatetimeoriginalestimate\", \"versions\", \"issuelinks\", \"assignee\", \"status\", \"components\", \"aggregatetimeestimate\", \"creator\", \"subtasks\", \"reporter\", \"aggregateprogress\", \"progress\", \"votes\", \"issuetype\", \"timespent\", \"project\", \"aggregatetimespent\", \"resolutiondate\", \"workratio\", \"watches\", \"created\", \"updated\", \"timeoriginalestimate\", \"description\", \"summary\", \"environment\", \"duedate\"}, {\"parent\", \"fixVersions\", \"resolution\", \"lastViewed\", \"priority\", \"labels\", \"timeestimate\", \"aggregatetimeoriginalestimate\", \"versions\", \"issuelinks\", \"assignee\", \"status\", \"components\", \"aggregatetimeestimate\", \"creator\", \"subtasks\", \"reporter\", \"aggregateprogress\", \"progress\", \"votes\", \"issuetype\", \"timespent\", \"project\", \"aggregatetimespent\", \"resolutiondate\", \"workratio\", \"watches\", \"created\", \"updated\", \"timeoriginalestimate\", \"description\", \"summary\", \"environment\", \"duedate\"}),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Expanded fields\",{\"status\"}),",
        "    #\"Expanded status\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"status\", {\"description\", \"id\", \"name\"}, {\"description\", \"id\", \"name\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Expanded status\"),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Removed Duplicates\", {\"name\"}, #\"Status Ranks\", {\"status.name\"}, \"Status Ranks\", JoinKind.LeftOuter),",
        "    #\"Expanded Status Ranks\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Status Ranks\", {\"Family\", \"Is terminal\", \"Status Rank\"}, {\"Family\", \"Is terminal\", \"Status Rank\"}),",
        "    #\"Sorted Rows\" = Table.Sort(#\"Expanded Status Ranks\",{{\"id\", Order.Ascending}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Sorted Rows\",{{\"name\", \"Status\"}}),",
        "    #\"Changed types\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"id\", type text}, {\"Is terminal\", type logical}})",
        "in",
        "    #\"Changed types\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = FetchPages(\\\"\\\", 100),\\n    #\\\"Expanded records\\\" = Table.ExpandRecordColumn(Source, \\\"Column1\\\", {\\\"expand\\\", \\\"id\\\", \\\"self\\\", \\\"key\\\", \\\"fields\\\"}, {\\\"expand\\\", \\\"issue ID\\\", \\\"issue address\\\", \\\"issue key\\\", \\\"fields\\\"}),\\n    #\\\"Expanded fields\\\" = Table.ExpandRecordColumn(#\\\"Expanded records\\\", \\\"fields\\\", {\\\"parent\\\", \\\"fixVersions\\\", \\\"resolution\\\", \\\"lastViewed\\\", \\\"priority\\\", \\\"labels\\\", \\\"timeestimate\\\", \\\"aggregatetimeoriginalestimate\\\", \\\"versions\\\", \\\"issuelinks\\\", \\\"assignee\\\", \\\"status\\\", \\\"components\\\", \\\"aggregatetimeestimate\\\", \\\"creator\\\", \\\"subtasks\\\", \\\"reporter\\\", \\\"aggregateprogress\\\", \\\"progress\\\", \\\"votes\\\", \\\"issuetype\\\", \\\"timespent\\\", \\\"project\\\", \\\"aggregatetimespent\\\", \\\"resolutiondate\\\", \\\"workratio\\\", \\\"watches\\\", \\\"created\\\", \\\"updated\\\", \\\"timeoriginalestimate\\\", \\\"description\\\", \\\"summary\\\", \\\"environment\\\", \\\"duedate\\\"}, {\\\"parent\\\", \\\"fixVersions\\\", \\\"resolution\\\", \\\"lastViewed\\\", \\\"priority\\\", \\\"labels\\\", \\\"timeestimate\\\", \\\"aggregatetimeoriginalestimate\\\", \\\"versions\\\", \\\"issuelinks\\\", \\\"assignee\\\", \\\"status\\\", \\\"components\\\", \\\"aggregatetimeestimate\\\", \\\"creator\\\", \\\"subtasks\\\", \\\"reporter\\\", \\\"aggregateprogress\\\", \\\"progress\\\", \\\"votes\\\", \\\"issuetype\\\", \\\"timespent\\\", \\\"project\\\", \\\"aggregatetimespent\\\", \\\"resolutiondate\\\", \\\"workratio\\\", \\\"watches\\\", \\\"created\\\", \\\"updated\\\", \\\"timeoriginalestimate\\\", \\\"description\\\", \\\"summary\\\", \\\"environment\\\", \\\"duedate\\\"}),\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(#\\\"Expanded fields\\\",{\\\"status\\\"}),\\n    #\\\"Expanded status\\\" = Table.ExpandRecordColumn(#\\\"Removed Other Columns\\\", \\\"status\\\", {\\\"description\\\", \\\"id\\\", \\\"name\\\"}, {\\\"description\\\", \\\"id\\\", \\\"name\\\"}),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Expanded status\\\"),\\n    #\\\"Merged Queries\\\" = Table.NestedJoin(#\\\"Removed Duplicates\\\", {\\\"name\\\"}, #\\\"Status Ranks\\\", {\\\"status.name\\\"}, \\\"Status Ranks\\\", JoinKind.LeftOuter),\\n    #\\\"Expanded Status Ranks\\\" = Table.ExpandTableColumn(#\\\"Merged Queries\\\", \\\"Status Ranks\\\", {\\\"Family\\\", \\\"Is terminal\\\", \\\"Status Rank\\\"}, {\\\"Family\\\", \\\"Is terminal\\\", \\\"Status Rank\\\"}),\\n    #\\\"Sorted Rows\\\" = Table.Sort(#\\\"Expanded Status Ranks\\\",{{\\\"id\\\", Order.Ascending}}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Sorted Rows\\\",{{\\\"name\\\", \\\"Status\\\"}}),\\n    #\\\"Changed types\\\" = Table.TransformColumnTypes(#\\\"Renamed Columns\\\",{{\\\"id\\\", type text}, {\\\"Is terminal\\\", type logical}})\\nin\\n    #\\\"Changed types\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Environments Lookup",
      "lineageTag": "8e1336ec-5282-4676-a053-971ab75fb8ea",
      "queryGroupId": "6fd0b5dd-a3b0-4581-95fa-6c1f9749a2c7",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"dY9BSwNBDIX/SpiThdldqp4EkYUV8WSxVZBtkbCTdhbHzTqTsfTfm67Vk15eQvK+l5m2NYvHh8bYn3JhNrY1ze2zhad6ZWG5urOAg4PTvg5B9XJyLSK73EnPwx88wJmjzyIQxqEfduX7wRMG8VuOod9SyXFXYp4pombV+QRmFO31sur59yQpDR07Ai8ypquqUlPhu38Sq5s9x7cxYEevR+q6Wdb39QuI7xMkzzk4wCxcjDzmgEK6IVibvUcBtRw4RzhGwJQxXV4b+MiUTj/9fd3mCw==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [environment = _t, #\"Env Cleaned\" = _t, #\"Sort Order\" = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"environment\", type text}, {\"Env Cleaned\", type text}}),",
        "    #\"Replaced Value\" = Table.ReplaceValue(#\"Changed Type\",\"null\",null,Replacer.ReplaceValue,{\"environment\", \"Env Cleaned\"}),",
        "    #\"Uppercased Text\" = Table.TransformColumns(#\"Replaced Value\",{{\"environment\", Text.Upper, type text}})",
        "in",
        "    #\"Uppercased Text\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"dY9BSwNBDIX/SpiThdldqp4EkYUV8WSxVZBtkbCTdhbHzTqTsfTfm67Vk15eQvK+l5m2NYvHh8bYn3JhNrY1ze2zhad6ZWG5urOAg4PTvg5B9XJyLSK73EnPwx88wJmjzyIQxqEfduX7wRMG8VuOod9SyXFXYp4pombV+QRmFO31sur59yQpDR07Ai8ypquqUlPhu38Sq5s9x7cxYEevR+q6Wdb39QuI7xMkzzk4wCxcjDzmgEK6IVibvUcBtRw4RzhGwJQxXV4b+MiUTj/9fd3mCw==\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [environment = _t, #\\\"Env Cleaned\\\" = _t, #\\\"Sort Order\\\" = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"environment\\\", type text}, {\\\"Env Cleaned\\\", type text}}),\\n    #\\\"Replaced Value\\\" = Table.ReplaceValue(#\\\"Changed Type\\\",\\\"null\\\",null,Replacer.ReplaceValue,{\\\"environment\\\", \\\"Env Cleaned\\\"}),\\n    #\\\"Uppercased Text\\\" = Table.TransformColumns(#\\\"Replaced Value\\\",{{\\\"environment\\\", Text.Upper, type text}})\\nin\\n    #\\\"Uppercased Text\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DateDimension",
      "lineageTag": "47b9e66b-7026-4e3f-8bbf-27bb11fd5c56",
      "queryGroupId": "b2840912-87bd-4254-8714-bde4621b2e3a",
      "text": [
        "let",
        "    Source = Sql.Database(Server, Database),",
        "    dbo_DateDimension = Source{[Schema=\"dbo\",Item=\"DateDimension\"]}[Data]",
        "in",
        "    dbo_DateDimension"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Sql.Database(Server, Database),\\n    dbo_DateDimension = Source{[Schema=\\\"dbo\\\",Item=\\\"DateDimension\\\"]}[Data]\\nin\\n    dbo_DateDimension\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Server",
      "lineageTag": "3b5e9a90-8584-4400-8dd8-eab83f8410c4",
      "description": "Server to connect to",
      "queryGroupId": "7d887633-a4e5-4268-a76c-694831af095b",
      "text": [
        "\"SourceServer\" meta [IsParameterQuery=true, List={\"SourceServer\"}, DefaultValue=\"SourceServer\", Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "Database",
      "lineageTag": "a17e5f19-2be4-4b05-b913-748c6f717800",
      "description": "Which instance of the DB should we connect to?",
      "queryGroupId": "7d887633-a4e5-4268-a76c-694831af095b",
      "text": [
        "\"Your_PROD\" meta [IsParameterQuery=true, List={\"Your_PROD\", \"Your_Dev\", \"Your_UAT\"}, DefaultValue=\"Your_PROD\", Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "Issue Types",
      "lineageTag": "c92ff046-27c6-44c0-ac99-56ce866f6282",
      "queryGroupId": "6fd0b5dd-a3b0-4581-95fa-6c1f9749a2c7",
      "text": [
        "let",
        "    Source = #\"JIRA Lookup tables\",",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"issuetype\"}),",
        "    #\"Expanded issuetype\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"issuetype\", {\"self\", \"id\", \"description\", \"iconUrl\", \"name\", \"subtask\", \"avatarId\", \"hierarchyLevel\"}, {\"self\", \"id\", \"description\", \"iconUrl\", \"name\", \"is subtask\", \"avatarId\", \"hierarchyLevel\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded issuetype\",{{\"is subtask\", type logical}, {\"hierarchyLevel\", Int64.Type}}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Changed Type\", {\"name\"}),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Removed Duplicates\", {\"name\"}, #\"Issue Families\", {\"Issue type\"}, \"Issue Families\", JoinKind.LeftOuter),",
        "    #\"Expanded Issue Families\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Issue Families\", {\"Issue type description\", \"Issue type family\"}, {\"Issue type description\", \"Issue type family\"}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Expanded Issue Families\",{\"description\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"name\", \"Issue Type\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"JIRA Lookup tables\\\",\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(Source,{\\\"issuetype\\\"}),\\n    #\\\"Expanded issuetype\\\" = Table.ExpandRecordColumn(#\\\"Removed Other Columns\\\", \\\"issuetype\\\", {\\\"self\\\", \\\"id\\\", \\\"description\\\", \\\"iconUrl\\\", \\\"name\\\", \\\"subtask\\\", \\\"avatarId\\\", \\\"hierarchyLevel\\\"}, {\\\"self\\\", \\\"id\\\", \\\"description\\\", \\\"iconUrl\\\", \\\"name\\\", \\\"is subtask\\\", \\\"avatarId\\\", \\\"hierarchyLevel\\\"}),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Expanded issuetype\\\",{{\\\"is subtask\\\", type logical}, {\\\"hierarchyLevel\\\", Int64.Type}}),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Changed Type\\\", {\\\"name\\\"}),\\n    #\\\"Merged Queries\\\" = Table.NestedJoin(#\\\"Removed Duplicates\\\", {\\\"name\\\"}, #\\\"Issue Families\\\", {\\\"Issue type\\\"}, \\\"Issue Families\\\", JoinKind.LeftOuter),\\n    #\\\"Expanded Issue Families\\\" = Table.ExpandTableColumn(#\\\"Merged Queries\\\", \\\"Issue Families\\\", {\\\"Issue type description\\\", \\\"Issue type family\\\"}, {\\\"Issue type description\\\", \\\"Issue type family\\\"}),\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Expanded Issue Families\\\",{\\\"description\\\"}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Removed Columns\\\",{{\\\"name\\\", \\\"Issue Type\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Report last refresh",
      "lineageTag": "bf9b8781-8e93-477f-a782-9485f598984b",
      "queryGroupId": "b2840912-87bd-4254-8714-bde4621b2e3a",
      "text": [
        "let",
        "    Source = DateTime.LocalNow(),",
        "    #\"Converted to Table\" = #table(1, {{Source}}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Converted to Table\",{{\"Column1\", type datetime}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Column1\", \"Report last refreshed\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = DateTime.LocalNow(),\\n    #\\\"Converted to Table\\\" = #table(1, {{Source}}),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Converted to Table\\\",{{\\\"Column1\\\", type datetime}}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Changed Type\\\",{{\\\"Column1\\\", \\\"Report last refreshed\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "MeasuresTable",
      "lineageTag": "fd0df1c5-53ce-4997-9be9-4f6abbd43477",
      "queryGroupId": "b2840912-87bd-4254-8714-bde4621b2e3a",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Column1\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i44FAA==\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"Column1\\\", type text}}),\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Changed Type\\\",{\\\"Column1\\\"})\\nin\\n    #\\\"Removed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Priorities",
      "lineageTag": "1e069bc1-10d3-4ecc-8d60-778ef46322f6",
      "queryGroupId": "6fd0b5dd-a3b0-4581-95fa-6c1f9749a2c7",
      "text": [
        "let",
        "    Source = #\"JIRA Lookup tables\",",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"priority\"}),",
        "    #\"Expanded priority\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"priority\", {\"self\", \"name\", \"id\"}, {\"self\", \"name\", \"id\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Expanded priority\"),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Duplicates\",{{\"name\", \"Priority\"}}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"id\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"JIRA Lookup tables\\\",\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(Source,{\\\"priority\\\"}),\\n    #\\\"Expanded priority\\\" = Table.ExpandRecordColumn(#\\\"Removed Other Columns\\\", \\\"priority\\\", {\\\"self\\\", \\\"name\\\", \\\"id\\\"}, {\\\"self\\\", \\\"name\\\", \\\"id\\\"}),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Expanded priority\\\"),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Removed Duplicates\\\",{{\\\"name\\\", \\\"Priority\\\"}}),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Renamed Columns\\\",{{\\\"id\\\", type text}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Fixes",
      "lineageTag": "ea8878f1-77ef-4706-b487-d73627e64de3",
      "queryGroupId": "6fd0b5dd-a3b0-4581-95fa-6c1f9749a2c7",
      "text": [
        "let",
        "    Source = #\"JIRA Lookup tables\",",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"fixVersions\"}),",
        "    #\"Expanded fixVersions\" = Table.ExpandListColumn(#\"Removed Other Columns\", \"fixVersions\"),",
        "    #\"Expanded fixVersions1\" = Table.ExpandRecordColumn(#\"Expanded fixVersions\", \"fixVersions\", {\"self\", \"id\", \"description\", \"name\", \"archived\", \"released\", \"releaseDate\"}, {\"self\", \"id\", \"description\", \"name\", \"archived\", \"released\", \"releaseDate\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Expanded fixVersions1\"),",
        "    #\"Removed Blank Rows\" = Table.SelectRows(#\"Removed Duplicates\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Blank Rows\",{{\"releaseDate\", type date}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"name\", \"Fix\"}}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"id\", type text}})",
        "in",
        "    #\"Changed Type1\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"JIRA Lookup tables\\\",\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(Source,{\\\"fixVersions\\\"}),\\n    #\\\"Expanded fixVersions\\\" = Table.ExpandListColumn(#\\\"Removed Other Columns\\\", \\\"fixVersions\\\"),\\n    #\\\"Expanded fixVersions1\\\" = Table.ExpandRecordColumn(#\\\"Expanded fixVersions\\\", \\\"fixVersions\\\", {\\\"self\\\", \\\"id\\\", \\\"description\\\", \\\"name\\\", \\\"archived\\\", \\\"released\\\", \\\"releaseDate\\\"}, {\\\"self\\\", \\\"id\\\", \\\"description\\\", \\\"name\\\", \\\"archived\\\", \\\"released\\\", \\\"releaseDate\\\"}),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Expanded fixVersions1\\\"),\\n    #\\\"Removed Blank Rows\\\" = Table.SelectRows(#\\\"Removed Duplicates\\\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\\\"\\\", null}))),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Removed Blank Rows\\\",{{\\\"releaseDate\\\", type date}}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Changed Type\\\",{{\\\"name\\\", \\\"Fix\\\"}}),\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Renamed Columns\\\",{{\\\"id\\\", type text}})\\nin\\n    #\\\"Changed Type1\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Devs",
      "lineageTag": "a942d02d-b409-471a-b5cd-c5c5d8a5ce67",
      "queryGroupId": "6fd0b5dd-a3b0-4581-95fa-6c1f9749a2c7",
      "text": [
        "let",
        "    Source = #\"JIRA Lookup tables\",",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"assignee\"}),",
        "    #\"Expanded assignee\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"assignee\", {\"self\", \"accountId\", \"emailAddress\", \"avatarUrls\", \"displayName\", \"active\", \"timeZone\", \"accountType\"}, {\"self\", \"accountId\", \"emailAddress\", \"avatarUrls\", \"displayName\", \"active\", \"timeZone\", \"accountType\"}),",
        "    #\"Expanded assignee.avatarUrls\" = Table.ExpandRecordColumn(#\"Expanded assignee\", \"avatarUrls\", {\"48x48\", \"24x24\", \"16x16\", \"32x32\"}, {\"avatarUrls.48x48\", \"avatarUrls.24x24\", \"avatarUrls.16x16\", \"avatarUrls.32x32\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Expanded assignee.avatarUrls\"),",
        "    #\"Removed Blank Rows\" = Table.SelectRows(#\"Removed Duplicates\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Blank Rows\",{{\"active\", type logical}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"JIRA Lookup tables\\\",\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(Source,{\\\"assignee\\\"}),\\n    #\\\"Expanded assignee\\\" = Table.ExpandRecordColumn(#\\\"Removed Other Columns\\\", \\\"assignee\\\", {\\\"self\\\", \\\"accountId\\\", \\\"emailAddress\\\", \\\"avatarUrls\\\", \\\"displayName\\\", \\\"active\\\", \\\"timeZone\\\", \\\"accountType\\\"}, {\\\"self\\\", \\\"accountId\\\", \\\"emailAddress\\\", \\\"avatarUrls\\\", \\\"displayName\\\", \\\"active\\\", \\\"timeZone\\\", \\\"accountType\\\"}),\\n    #\\\"Expanded assignee.avatarUrls\\\" = Table.ExpandRecordColumn(#\\\"Expanded assignee\\\", \\\"avatarUrls\\\", {\\\"48x48\\\", \\\"24x24\\\", \\\"16x16\\\", \\\"32x32\\\"}, {\\\"avatarUrls.48x48\\\", \\\"avatarUrls.24x24\\\", \\\"avatarUrls.16x16\\\", \\\"avatarUrls.32x32\\\"}),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Expanded assignee.avatarUrls\\\"),\\n    #\\\"Removed Blank Rows\\\" = Table.SelectRows(#\\\"Removed Duplicates\\\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\\\"\\\", null}))),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Removed Blank Rows\\\",{{\\\"active\\\", type logical}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Linked Issues",
      "lineageTag": "f47a492b-6658-47bf-b4b9-41d95de0075a",
      "queryGroupId": "6ae60c9a-d92b-4200-817e-c1596b1ebd60",
      "text": [
        "let",
        "    Source = #\"YourOrg issues\",",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"issue key\", \"parent.key\"}),",
        "    #\"removed rows with no parents\" = Table.SelectRows(#\"Removed Other Columns\", each ([parent.key] <> null))",
        "in",
        "    #\"removed rows with no parents\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"YourOrg issues\\\",\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(Source,{\\\"issue key\\\", \\\"parent.key\\\"}),\\n    #\\\"removed rows with no parents\\\" = Table.SelectRows(#\\\"Removed Other Columns\\\", each ([parent.key] <> null))\\nin\\n    #\\\"removed rows with no parents\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Projects",
      "lineageTag": "eda4aec9-5929-40c5-9a98-e5c3cff37b6b",
      "queryGroupId": "6fd0b5dd-a3b0-4581-95fa-6c1f9749a2c7",
      "text": [
        "let",
        "    Source = #\"JIRA Lookup tables\",",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"project\"}),",
        "    #\"Expanded project\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"project\", {\"self\", \"id\", \"key\", \"name\", \"projectTypeKey\", \"simplified\", \"avatarUrls\", \"projectCategory\"}, {\"self\", \"id\", \"key\", \"project\", \"projectTypeKey\", \"simplified\", \"avatarUrls\", \"projectCategory\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Expanded project\"),",
        "    #\"Expanded avatarUrls\" = Table.ExpandRecordColumn(#\"Removed Duplicates\", \"avatarUrls\", {\"48x48\", \"24x24\", \"16x16\", \"32x32\"}, {\"avatarUrls.48x48\", \"avatarUrls.24x24\", \"avatarUrls.16x16\", \"avatarUrls.32x32\"}),",
        "    #\"Expanded projectCategory\" = Table.ExpandRecordColumn(#\"Expanded avatarUrls\", \"projectCategory\", {\"self\", \"id\", \"description\", \"name\"}, {\"projectCategory.self\", \"projectCategory.id\", \"projectCategory.description\", \"projectCategory.name\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded projectCategory\",{{\"project\", \"Project\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"JIRA Lookup tables\\\",\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(Source,{\\\"project\\\"}),\\n    #\\\"Expanded project\\\" = Table.ExpandRecordColumn(#\\\"Removed Other Columns\\\", \\\"project\\\", {\\\"self\\\", \\\"id\\\", \\\"key\\\", \\\"name\\\", \\\"projectTypeKey\\\", \\\"simplified\\\", \\\"avatarUrls\\\", \\\"projectCategory\\\"}, {\\\"self\\\", \\\"id\\\", \\\"key\\\", \\\"project\\\", \\\"projectTypeKey\\\", \\\"simplified\\\", \\\"avatarUrls\\\", \\\"projectCategory\\\"}),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Expanded project\\\"),\\n    #\\\"Expanded avatarUrls\\\" = Table.ExpandRecordColumn(#\\\"Removed Duplicates\\\", \\\"avatarUrls\\\", {\\\"48x48\\\", \\\"24x24\\\", \\\"16x16\\\", \\\"32x32\\\"}, {\\\"avatarUrls.48x48\\\", \\\"avatarUrls.24x24\\\", \\\"avatarUrls.16x16\\\", \\\"avatarUrls.32x32\\\"}),\\n    #\\\"Expanded projectCategory\\\" = Table.ExpandRecordColumn(#\\\"Expanded avatarUrls\\\", \\\"projectCategory\\\", {\\\"self\\\", \\\"id\\\", \\\"description\\\", \\\"name\\\"}, {\\\"projectCategory.self\\\", \\\"projectCategory.id\\\", \\\"projectCategory.description\\\", \\\"projectCategory.name\\\"}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Expanded projectCategory\\\",{{\\\"project\\\", \\\"Project\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "JIRA Lookup tables",
      "lineageTag": "32342a4d-5743-4940-a58f-93b3aec6193a",
      "queryGroupId": "7f588cab-7e40-4edf-9e3c-32ab14e7191d",
      "text": [
        "let",
        "    Source = FetchPages(\"\", 100),",
        "    #\"Expanded records\" = Table.ExpandRecordColumn(Source, \"Column1\", {\"expand\", \"id\", \"self\", \"key\", \"fields\"}, {\"expand\", \"issue ID\", \"issue address\", \"issue key\", \"fields\"}),",
        "    #\"Expanded fields\" = Table.ExpandRecordColumn(#\"Expanded records\", \"fields\", {\"parent\", \"fixVersions\", \"resolution\", \"lastViewed\", \"priority\", \"labels\", \"timeestimate\", \"aggregatetimeoriginalestimate\", \"versions\", \"issuelinks\", \"assignee\", \"status\", \"components\", \"aggregatetimeestimate\", \"creator\", \"subtasks\", \"reporter\", \"aggregateprogress\", \"progress\", \"votes\", \"issuetype\", \"timespent\", \"project\", \"aggregatetimespent\", \"resolutiondate\", \"workratio\", \"watches\", \"created\", \"updated\", \"timeoriginalestimate\", \"description\", \"summary\", \"environment\", \"duedate\"}, {\"parent\", \"fixVersions\", \"resolution\", \"lastViewed\", \"priority\", \"labels\", \"timeestimate\", \"aggregatetimeoriginalestimate\", \"versions\", \"issuelinks\", \"assignee\", \"status\", \"components\", \"aggregatetimeestimate\", \"creator\", \"subtasks\", \"reporter\", \"aggregateprogress\", \"progress\", \"votes\", \"issuetype\", \"timespent\", \"project\", \"aggregatetimespent\", \"resolutiondate\", \"workratio\", \"watches\", \"created\", \"updated\", \"timeoriginalestimate\", \"description\", \"summary\", \"environment\", \"duedate\"}),",
        "    // Resolution: Worse version of status",
        "    // Description: wayyyy to much text, dont need that in report's memory",
        "    // Expand: fields the API can get",
        "    // Watches: don't need to know/report it",
        "    // Versions: would bloat report",
        "    // Linked Issues: would bloat report",
        "    // Subtask: already have parent task if relevant, would bloat",
        "    // Votes: not using votes here",
        "    #\"Removed unneccesary fields\" = Table.RemoveColumns(#\"Expanded fields\",{\"expand\", \"watches\", \"versions\", \"issuelinks\", \"subtasks\", \"votes\", \"resolution\", \"description\"}),",
        "    // Extracted to records from List",
        "    #\"Expanded components\" = Table.ExpandListColumn(#\"Removed unneccesary fields\", \"components\"),",
        "    #\"Expanded components1\" = Table.ExpandRecordColumn(#\"Expanded components\", \"components\", {\"name\"}, {\"components.name\"}),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Expanded components1\",{\"priority\", \"labels\", \"fixVersions\", \"assignee\", \"status\", \"progress\", \"issuetype\", \"project\"})",
        "in",
        "    #\"Removed Other Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Issue Families",
      "lineageTag": "a9d59c10-d70f-485e-86a6-f9d5e82e5165",
      "queryGroupId": "7f588cab-7e40-4edf-9e3c-32ab14e7191d",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"bVRLb9swDP4rRE4bkAbFLjt36Q7tUKBrcut6oGXa0SJLrh7x/O9Hyo/ETS+2KPH58SNfX1d3EFwVO/QEJZ3IuLYhGyFiOK7Wq3s6wX4+rt7WYtB6VxhqwHkg753f8OuPVI/fQSc0aMwaSh2itipCq0kRuAo6549iMHrNPzHZRec1BYge1RGqxEbaWTQ69hKoIozJ8zv9a/kXqAQMkAJ5qB2aIC7FRT//hzwKXQ9aQS4hHjCCJSo5kIOCoPDuSBZK19kNbD1HYc9FD4/aI+wmZG5YAayLQKWOkk5JhiJJ0J+tVh9iCnbivnQqZTARQh8iNWsge9LeWbldix+GUnE1Au+ojFI2y7+s6wyVNWWnz979JZVD87H22MCLzgBe/nJ4CzqERBD7lqDKuSod2GmOMp4vj2K1PxAwrMnEIE1C2FOIsMVA0qPpDC+DyniXLfFz/oRU3FxwaLcQR5watAkNRBKO1Nwhai+jXUZhQummNQTvSbSdXXO670l7McTpEW3oyG/gIeRmoQUcWMR0nRj9e3RwBfHI2SVTM2H+pNvbb98DtOjjgI5BXzOnxGUm3rm6mc93oBJzrrnqBkYsBMsWozpw+gIJ38GzyJPwIEYf6KQyO9fQuFJXeSg8Rc24IxynSrJnTlMrw5oH14lhnXRJQFFtLovOqneD6hUYuU+tcX1u5rwBppsxM2mBdCtPVeWMcV2Ah/3uKWNXiSghX3eZ/W+wI3/SiiY7QS6/ZHf3FJTXhZRznv6xy5TTuIEuB1rsBiFe75LsBR4QocOXmQ0lE8PWibv1VUbk7GoxsFdTP2b5hBbrrL4oYntAW9Myd5bm68Vcsfw8bMuL7bj9lBieWudzAR/3cIDAtelKq5lBXBwajh9yXWIIn6zqXSa0jrKrRz53OjLpzhSWx4HBCwK//Qc=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [issuetype.description = _t, issuetype = _t, Family = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"issuetype.description\", type text}, {\"issuetype\", type text}, {\"Family\", type text}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Family\", \"Issue type family\"}, {\"issuetype\", \"Issue type\"}, {\"issuetype.description\", \"Issue type description\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    }
  ],
  "queryGroups": [
    {
      "name": "02 Supporting Tables",
      "id": "b32c7fbb-7d07-4d1b-ae64-d421ad226e10",
      "order": 3,
      "description": ""
    },
    {
      "name": "00 Params",
      "id": "7d887633-a4e5-4268-a76c-694831af095b",
      "description": ""
    },
    {
      "name": "03 From Content Pack",
      "id": "09d8754a-20b9-4c08-a637-a0011031d480",
      "order": 4,
      "description": ""
    },
    {
      "name": "01 Utilities",
      "id": "b2840912-87bd-4254-8714-bde4621b2e3a",
      "order": 1,
      "description": ""
    },
    {
      "name": "99 Testing",
      "id": "480169fa-ecb3-4bd1-9991-fc3009fff74d",
      "order": 8,
      "description": ""
    },
    {
      "name": "03.1 Functions",
      "id": "0578f6e1-15e6-4c14-9cac-bd113d201f09",
      "order": 1,
      "description": "",
      "parentId": "09d8754a-20b9-4c08-a637-a0011031d480"
    },
    {
      "name": "03.2 Datasets Returned",
      "id": "6ae60c9a-d92b-4200-817e-c1596b1ebd60",
      "order": 2,
      "description": "",
      "parentId": "09d8754a-20b9-4c08-a637-a0011031d480"
    },
    {
      "name": "02.2 Lookup tables",
      "id": "6fd0b5dd-a3b0-4581-95fa-6c1f9749a2c7",
      "order": 1,
      "description": "",
      "parentId": "b32c7fbb-7d07-4d1b-ae64-d421ad226e10"
    },
    {
      "name": "02.1 Staging",
      "id": "7f588cab-7e40-4edf-9e3c-32ab14e7191d",
      "order": 2,
      "description": "",
      "parentId": "b32c7fbb-7d07-4d1b-ae64-d421ad226e10"
    }
  ],
  "culture": "en-AU"
}